http://stackoverflow.com/questions/11051205/difference-between-java-util-random-and-java-security-securerandom

A: Igaz. http://docs.oracle.com/javase/7/docs/api/java/util/Random.html: "If two instances of Random are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers."

    /**
     * Creates a new random number generator. This constructor sets
     * the seed of the random number generator to a value very likely
     * to be distinct from any other invocation of this constructor.
     */
    public Random() {
        this(seedUniquifier() ^ System.nanoTime());
    }

    private static long seedUniquifier() {
        // L'Ecuyer, "Tables of Linear Congruential Generators of
        // Different Sizes and Good Lattice Structure", 1999
        for (;;) {
            long current = seedUniquifier.get();
            long next = current * 181783497276652981L;
            if (seedUniquifier.compareAndSet(current, next))
                return next;
        }
    }

    private static final AtomicLong seedUniquifier
        = new AtomicLong(8682522807148012L);

    /**
     * Creates a new random number generator using a single {@code long} seed.
     * The seed is the initial value of the internal state of the pseudorandom
     * number generator which is maintained by method {@link #next}.
     *
     * <p>The invocation {@code new Random(seed)} is equivalent to:
     *  <pre> {@code
     * Random rnd = new Random();
     * rnd.setSeed(seed);}</pre>
     *
     * @param seed the initial seed
     * @see   #setSeed(long)
     */
    public Random(long seed) {
        if (getClass() == Random.class)
            this.seed = new AtomicLong(initialScramble(seed));
        else {
            // subclass might have overriden setSeed
            this.seed = new AtomicLong();
            setSeed(seed);
        }
    }

B: Igaz. A Random osztálynka egyetlen non-static class memberje van, ami alapján generálja a számokat. Ha ezt és számolás módszerét tudjuk (azt tudjuk, mert open source), akkor előre tudunk számolni.
	
	/**
     * The internal state associated with this pseudorandom number generator.
     * (The specs for the methods in this class describe the ongoing
     * computation of this value.)
     */
    private final AtomicLong seed;


C: Nem igaz, csak a seedtől függ. A seed meg nem változik az idő függvényében.
D: Nem igaz, csak a seedtől függ.
E: Igaz, mert ha tudja a kezdeti seedet, meg hogy azzal mit csináltak (meghívták x-szer a nextInt() metódust), akkor ki tudja számolni az aktuális seedet.
D: Nem igaz, legalább 2 kell, hogy vissze lehessen fejteni a seedet: https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html